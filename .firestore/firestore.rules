rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 기본 규칙: 인증되지 않은 사용자는 접근 불가
    match /{document=**} {
      allow read, write: if false;
    }
    
    // 관리자 확인 함수
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // 사용자 주문 확인 함수 (주문의 customer.id가 현재 인증된 사용자의 ID와 일치하는지)
    function isUserOrder(orderId) {
      return request.auth != null && 
             request.auth.uid == get(/databases/$(database)/documents/orders/$(orderId)).data.customer.id;
    }
    
    // 데이터 검증 함수
    function isValidProduct() {
      let requiredFields = ['title', 'price', 'status'];
      return requiredFields.every(field => request.resource.data[field] != null);
    }
    
    function isValidCategory() {
      return request.resource.data.name != null;
    }
    
    function isValidOrder() {
      return request.resource.data.customer != null && 
             request.resource.data.items != null && 
             request.resource.data.items.size() > 0;
    }
    
    // 상태 업데이트 검증 (특정 필드만 업데이트하는 경우)
    function isStatusUpdateOnly() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'history']);
    }
    
    // 제품 컬렉션: 모든 사용자가 읽기 가능, 관리자만 쓰기 가능
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null && isAdmin() && isValidProduct();
      allow update: if request.auth != null && isAdmin();
      allow delete: if request.auth != null && isAdmin();
    }
    
    // 카테고리 컬렉션: 모든 사용자가 읽기 가능, 관리자만 쓰기 가능
    match /categories/{categoryId} {
      allow read: if true;
      allow create: if request.auth != null && isAdmin() && isValidCategory();
      allow update: if request.auth != null && isAdmin();
      allow delete: if request.auth != null && isAdmin();
    }
    
    // 재고 컬렉션: 모든 사용자가 읽기 가능, 관리자만 쓰기 가능
    match /inventory/{inventoryId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // 사용자 컬렉션: 자신의 데이터만 읽기/쓰기 가능, 관리자는 모든 사용자 데이터 접근 가능
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // 자신의 기본 정보 업데이트만 허용, 관리자는 모두 가능
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !('role' in request.resource.data.diff(resource.data).affectedKeys())) || 
        isAdmin()
      );
      allow create, delete: if request.auth != null && isAdmin();
    }
    
    // 주문 컬렉션: 자신의 주문만 읽기/쓰기 가능, 관리자는 모든 주문 접근 가능
    match /orders/{orderId} {
      allow read: if request.auth != null && (isUserOrder(orderId) || isAdmin());
      
      // 사용자는 주문 생성만 가능
      allow create: if request.auth != null && request.auth.uid == request.resource.data.customer.id && isValidOrder();
      
      // 사용자는 pending/confirmed 상태에서 cancelled로의 변경만 가능
      // 관리자는 모든 업데이트 가능
      allow update: if request.auth != null && (
        (isUserOrder(orderId) && 
         (resource.data.status == 'pending' || resource.data.status == 'confirmed') && 
         request.resource.data.status == 'cancelled' &&
         isStatusUpdateOnly()) || 
        isAdmin()
      );
      
      // 주문 삭제는 관리자만 가능
      allow delete: if request.auth != null && isAdmin();
    }
    
    // 프로모션/쿠폰 컬렉션: 모든 사용자가 읽기 가능, 관리자만 쓰기 가능
    match /promotions/{promotionId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
  }
} 