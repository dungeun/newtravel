'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Link from 'next/link';
import { Order, OrderStatus } from '@/app/types/order';

// UI Components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/app/components/ui/separator';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/app/components/ui/tabs';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';

// Icons
import { 
  ArrowLeft, 
  Edit, 
  Printer, 
  Mail, 
  Receipt, 
  XCircle, 
  RefreshCw, 
  CreditCard, 
  Truck,
  Loader2,
  Info,
  AlertCircle
} from 'lucide-react';

// 주문 상태별 색상 정의 (Tailwind CSS 클래스)
const statusColors: Record<OrderStatus, string> = {
  'pending': 'bg-gray-200 text-gray-800',
  'confirmed': 'bg-blue-100 text-blue-800',
  'paid': 'bg-indigo-100 text-indigo-800',
  'processing': 'bg-yellow-100 text-yellow-800',
  'ready': 'bg-purple-100 text-purple-800',
  'completed': 'bg-green-100 text-green-800',
  'cancelled': 'bg-red-100 text-red-800',
  'refunded': 'bg-red-100 text-red-800'
};

// 주문 상태 한글 표시
const statusLabels: Record<OrderStatus, string> = {
  'pending': '대기중',
  'confirmed': '확인됨',
  'paid': '결제완료',
  'processing': '처리중',
  'ready': '준비완료',
  'completed': '완료됨',
  'cancelled': '취소됨',
  'refunded': '환불됨'
};

// 결제 상태 한글 표시
const paymentStatusLabels: Record<string, string> = {
  'pending': '결제 대기중',
  'completed': '결제 완료',
  'failed': '결제 실패',
  'refunded': '환불 완료',
  'partially_refunded': '부분 환불'
};

// 결제 상태별 색상 정의
const paymentStatusColors: Record<string, string> = {
  'pending': 'bg-yellow-100 text-yellow-800',
  'completed': 'bg-green-100 text-green-800',
  'failed': 'bg-red-100 text-red-800',
  'refunded': 'bg-red-100 text-red-800',
  'partially_refunded': 'bg-blue-100 text-blue-800'
};

// 날짜 포맷팅 함수
const formatDate = (dateString: string | Date | undefined): string => {
  if (!dateString) return '-';
  const date = new Date(dateString);
  return date.toLocaleDateString('ko-KR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// 금액 포맷팅 함수
const formatCurrency = (amount: number, currency: string = 'KRW'): string => {
  return new Intl.NumberFormat('ko-KR', {
    style: 'currency',
    currency: currency
  }).format(amount);
};

// OrderLineItems 컴포넌트 - 주문 상품 목록 표시
const OrderLineItems = ({ order }: { order: Order }): JSX.Element => {
  return (
    <Card className="mb-6">
      <CardHeader>
        <h3 className="text-lg font-semibold">주문 상품 정보</h3>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHead>
              <TableRow>
                <TableCell className="font-medium">상품명</TableCell>
                <TableCell className="text-center font-medium">옵션</TableCell>
                <TableCell className="text-center font-medium">여행 일정</TableCell>
                <TableCell className="text-right font-medium">단가</TableCell>
                <TableCell className="text-right font-medium">수량</TableCell>
                <TableCell className="text-right font-medium">금액</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {order.items.map((item, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <div className="font-medium">{item.productTitle}</div>
                    {item.productId && (
                      <div className="text-xs text-gray-500">
                        상품 ID: {item.productId}
                      </div>
                    )}
                  </TableCell>
                  <TableCell className="text-center">
                    {item.quantity ? (
                      <div className="flex flex-wrap justify-center gap-1">
                        {item.quantity.adult > 0 && (
                          <Badge variant="outline" className="text-xs">
                            성인 {item.quantity.adult}명
                          </Badge>
                        )}
                        {item.quantity.child > 0 && (
                          <Badge variant="outline" className="text-xs">
                            아동 {item.quantity.child}명
                          </Badge>
                        )}
                        {item.quantity.infant > 0 && (
                          <Badge variant="outline" className="text-xs">
                            유아 {item.quantity.infant}명
                          </Badge>
                        )}
                      </div>
                    ) : (
                      '-'
                    )}
                  </TableCell>
                  <TableCell className="text-center">
                    {item.travelDate ? (
                      <div className="text-sm">
                        {formatDate(item.travelDate.startDate)} ~ {formatDate(item.travelDate.endDate)}
                      </div>
                    ) : (
                      '-'
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    {item.price ? formatCurrency(item.price.adult, item.price.currency) : '-'}
                  </TableCell>
                  <TableCell className="text-right">
                    {item.quantity ? (
                      (item.quantity.adult || 0) + (item.quantity.child || 0) + (item.quantity.infant || 0)
                    ) : '-'}
                  </TableCell>
                  <TableCell className="text-right font-bold">
                    {formatCurrency(item.subtotal, order.currency)}
                  </TableCell>
                </TableRow>
              ))}
              <TableRow>
                <TableCell colSpan={5} className="text-right font-medium">
                  총 주문금액
                </TableCell>
                <TableCell className="text-right font-bold text-lg">
                  {formatCurrency(order.totalAmount, order.currency)}
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
};

// OrderCustomerInfo 컴포넌트 - 고객 정보 표시
const OrderCustomerInfo = ({ order }: { order: Order }): JSX.Element => {
  return (
    <Card className="mb-6">
      <CardHeader>
        <h3 className="text-lg font-semibold">고객 정보</h3>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
          <Card className="h-full">
            <CardHeader>
              <h4 className="text-base font-medium">주문자 정보</h4>
            </CardHeader>
            <Separator />
            <CardContent>
              <dl className="grid grid-cols-4 gap-2">
                <dt className="col-span-1 font-medium text-gray-600">고객명</dt>
                <dd className="col-span-3">{order.customer.name}</dd>
                
                <dt className="col-span-1 font-medium text-gray-600">이메일</dt>
                <dd className="col-span-3">{order.customer.email}</dd>
                
                <dt className="col-span-1 font-medium text-gray-600">전화번호</dt>
                <dd className="col-span-3">{order.customer.phone}</dd>
              </dl>
            </CardContent>
          </Card>
          
          <Card className="h-full">
            <CardHeader>
              <h4 className="text-base font-medium">특별 요청사항</h4>
            </CardHeader>
            <Separator />
            <CardContent>
              {order.specialRequests ? (
                <p>{order.specialRequests}</p>
              ) : (
                <p className="text-gray-500">특별 요청사항이 없습니다.</p>
              )}
            </CardContent>
          </Card>
        </div>
      </CardContent>
    </Card>
  );
};

// OrderStatusHistory 컴포넌트 - 주문 상태 이력 표시
const OrderStatusHistory = ({ order }: { order: Order }): JSX.Element => {
  return (
    <Card className="mb-6">
      <CardHeader>
        <h3 className="text-lg font-semibold">주문 상태 이력</h3>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHead>
              <TableRow>
                <TableCell className="font-medium">날짜</TableCell>
                <TableCell className="font-medium">상태</TableCell>
                <TableCell className="font-medium">메모</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {/* 주문 생성 이력 */}
              <TableRow>
                <TableCell>{formatDate(order.createdAt)}</TableCell>
                <TableCell>
                  <Badge className="bg-blue-100 text-blue-800">
                    주문 생성
                  </Badge>
                </TableCell>
                <TableCell>주문이 생성되었습니다.</TableCell>
              </TableRow>
              
              {/* 주문 상태 변경 이력 - 실제로는 API에서 이력 데이터를 받아와야 함 */}
              <TableRow>
                <TableCell>{formatDate(order.updatedAt)}</TableCell>
                <TableCell>
                  <Badge className={statusColors[order.status]}>
                    {statusLabels[order.status]}
                  </Badge>
                </TableCell>
                <TableCell>{order.notes || '-'}</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
};

export default function OrderDetailPage(): JSX.Element {
  const params = useParams();
  const router = useRouter();
  const orderId = params.id as string;
  
  const [order, setOrder] = useState<Order | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [statusUpdateLoading, setStatusUpdateLoading] = useState(false);
  const [newStatus, setNewStatus] = useState<OrderStatus | ''>('');
  const [statusNote, setStatusNote] = useState('');
  const [statusDialogOpen, setStatusDialogOpen] = useState(false);
  
  // 취소/환불 관련 상태
  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);
  const [refundDialogOpen, setRefundDialogOpen] = useState(false);
  const [cancelReason, setCancelReason] = useState('');
  const [refundReason, setRefundReason] = useState('');
  const [refundAmount, setRefundAmount] = useState<number | ''>('');
  const [isPartialRefund, setIsPartialRefund] = useState(false);
  const [actionLoading, setActionLoading] = useState(false);

  // URL 쿼리 파라미터 처리
  useEffect(() => {
    const searchParams = new URLSearchParams(window.location.search);
    const action = searchParams.get('action');
    
    if (action === 'cancel') {
      setCancelDialogOpen(true);
    } else if (action === 'refund') {
      setRefundDialogOpen(true);
    }
    
    // 현재 URL에서 쿼리 파라미터 제거 (다이얼로그가 닫히면 다시 열리는 것을 방지)
    if (action) {
      const cleanUrl = window.location.pathname;
      window.history.replaceState({}, '', cleanUrl);
    }
  }, []);

  // 주문 정보 조회
  const fetchOrderDetail = async (): Promise<void> => {
    setLoading(true);
    setError(null);
    
    try {
      const orderId = params.id;
      const response = await fetch(`/api/admin/orders/${orderId}`);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '주문 정보를 가져오는 데 실패했습니다.');
      }
      
      const data = await response.json();
      setOrder(data.order);
    } catch (err: any) {
      console.error('주문 정보 조회 오류:', err);
      setError(err.message || '주문 정보를 가져오는 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };
  
  // 상태 변경 다이얼로그 열기
  const handleOpenStatusDialog = (): void => {
    if (order) {
      setNewStatus(order.status);
      setStatusNote('');
      setStatusDialogOpen(true);
    }
  };
  
  // 상태 변경 다이얼로그 닫기
  const handleCloseStatusDialog = (): void => {
    setStatusDialogOpen(false);
  };
  
  // 주문 상태 변경 처리
  const handleStatusChange = async () => {
    if (!order || !newStatus) return;
    
    try {
      setStatusUpdateLoading(true);
      const response = await fetch(`/api/admin/orders/${order.id}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          status: newStatus,
          note: statusNote
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // 주문 상태 변경 성공
        setStatusDialogOpen(false);
        setNewStatus('');
        setStatusNote('');
        fetchOrderDetail(); // 주문 정보 새로 가져오기
      } else {
        // 오류 처리
        setError(data.error || '주문 상태 변경 중 오류가 발생했습니다.');
      }
    } catch (err) {
      setError('서버 연결 오류가 발생했습니다.');
    } finally {
      setStatusUpdateLoading(false);
    }
  };
  
  // 주문 취소 처리
  const handleCancelOrder = async () => {
    if (!order) return;
    
    try {
      setActionLoading(true);
      const response = await fetch(`/api/admin/orders/${order.id}/cancel`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          reason: cancelReason || '관리자에 의한 주문 취소'
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // 주문 취소 성공
        setCancelDialogOpen(false);
        setCancelReason('');
        fetchOrderDetail(); // 주문 정보 새로 가져오기
      } else {
        // 오류 처리
        setError(data.error || '주문 취소 중 오류가 발생했습니다.');
      }
    } catch (err) {
      setError('서버 연결 오류가 발생했습니다.');
    } finally {
      setActionLoading(false);
    }
  };
  
  // 주문 환불 처리
  const handleRefundOrder = async () => {
    if (!order) return;
    
    try {
      setActionLoading(true);
      const response = await fetch(`/api/admin/orders/${order.id}/refund`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          reason: refundReason || '관리자에 의한 주문 환불',
          amount: refundAmount || order.totalAmount,
          isPartial: isPartialRefund
        })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        // 주문 환불 성공
        setRefundDialogOpen(false);
        setRefundReason('');
        setRefundAmount('');
        setIsPartialRefund(false);
        fetchOrderDetail(); // 주문 정보 새로 가져오기
      } else {
        // 오류 처리
        setError(data.error || '주문 환불 중 오류가 발생했습니다.');
      }
    } catch (err) {
      setError('서버 연결 오류가 발생했습니다.');
    } finally {
      setActionLoading(false);
    }
  };
  
  // 이메일 전송 핸들러
  const handleSendEmail = (): void => {
    // 이메일 전송 로직 구현 (추후 개발)
    alert('이메일 전송 기능은 아직 구현되지 않았습니다.');
  };
  
  // 인쇄 핸들러
  const handlePrint = (): void => {
    window.print();
  };
  
  // 컴포넌트 마운트 시 주문 정보 조회
  useEffect(() => {
    if (orderId) {
      fetchOrderDetail();
    }
  }, [orderId]);

// 컴포넌트 마운트 시 주문 정보 조회
useEffect(() => {
  if (orderId) {
    fetchOrderDetail();
  }
}, [orderId]);

if (loading) {
  return (
    <div className="flex justify-center items-center h-[50vh]">
      <Loader2 className="h-8 w-8 animate-spin text-primary mr-2" />
      <span>주문 정보를 불러오는 중...</span>
    </div>
  );
}

if (error) {
  return (
    <div className="p-6">
      <Alert variant="destructive" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>오류</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
      <Button
        variant="default"
        onClick={() => router.push('/admin/orders')}
      >
        <ArrowLeft className="mr-2 h-4 w-4" />
        주문 목록으로 돌아가기
      </Button>
    </div>
  );
}

if (!order) {
  return (
    <div className="p-6">
      <Alert variant="warning" className="mb-6">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>알림</AlertTitle>
        <AlertDescription>주문 정보를 찾을 수 없습니다.</AlertDescription>
      </Alert>
      <Button
        variant="outline"
        asChild
      >
        <Link href="/admin/orders">
          <ArrowLeft className="mr-2 h-4 w-4" />
          주문 목록으로 돌아가기
        </Link>
      </Button>
    </div>
  );
}

return (
  <div className="p-6">
    {/* 브레드크럼 네비게이션 */}
    <nav className="mb-6">
      <ol className="flex items-center">
        <li>
          <Link href="/admin" passHref>
            <a className="text-gray-600 hover:text-gray-900">관리자</a>
          </Link>
        </li>
        <li>
          <Link href="/admin/orders" passHref>
            <a className="text-gray-600 hover:text-gray-900">주문 관리</a>
          </Link>
        </li>
        <li>
          <span className="text-gray-600">주문 상세</span>
        </li>
      </ol>
    </nav>
    
    {/* 주문 헤더 */}
    <div className="flex justify-between items-center mb-6">
      <div className="flex items-center">
        <h1 className="text-2xl font-bold mr-2">주문 #{order.orderNumber}</h1>
        <span className="text-gray-600">{statusLabels[order.status] || order.status}</span>
      </div>
      <div className="flex items-center">
        <button
          className="text-gray-600 hover:text-gray-900 mr-2"
          onClick={() => fetchOrderDetail()}
        >
          <RefreshIcon className="h-4 w-4" />
        </button>
        <Button
          variant="default"
          className="mr-2"
          onClick={handleSendEmail}
        >
          <Mail className="mr-2 h-4 w-4" />
          이메일 전송
        </Button>
        <Button
          variant="default"
          className="mr-2"
          onClick={handlePrint}
        >
          <Printer className="mr-2 h-4 w-4" />
          인쇄
        </Button>
        <Button
          variant="default"
          className="mr-2"
          asChild
        >
          <Link href={`/admin/orders/${orderId}/edit`}>
            <Edit className="mr-2 h-4 w-4" />
            수정
          </Link>
        </Button>
        <Button
          variant="default"
          className="mr-2"
          onClick={handleOpenStatusDialog}
        >
          상태 변경
        </Button>
      </div>
    </div>
    
    {/* 주문 정보 요약 */}
    <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <div className="flex items-center mb-2">
          <CreditCardIcon className="h-4 w-4 text-gray-600 mr-2" />
          <h2 className="text-lg font-bold">결제 정보</h2>
        </div>
        <div className="border-b border-gray-200 mb-2" />
        <div className="mt-2">
          <span className="text-gray-600">결제 방법</span>
          <p className="text-lg">{order.payment?.method || '-'}</p>
        </div>
        <div className="mt-2">
          <span className="text-gray-600">결제 상태</span>
          <span className="text-lg">{order.payment?.status ? paymentStatusLabels[order.payment.status] : '-'}</span>
        </div>
        <div className="mt-2">
          <span className="text-gray-600">총 금액</span>
          <p className="text-lg font-bold">{formatCurrency(order.totalAmount, order.currency)}</p>
        </div>
      </div>
      {/* 브레드크럼 네비게이션 */}
      <nav className="flex items-center space-x-2 mb-6" aria-label="Breadcrumb">
        <Link href="/admin" className="text-gray-500 hover:text-gray-700">
          관리자
        </Link>
        <span className="text-gray-400">/</span>
        <Link href="/admin/orders" className="text-gray-500 hover:text-gray-700">
          주문 관리
        </Link>
        <span className="text-gray-400">/</span>
        <span className="text-gray-900 font-medium">주문 상세</span>
      </nav>
      
      {/* 주문 헤더 */}
      <Card className="p-4 mb-6">
        
        {/* 주문 정보 요약 */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
          <Card className="p-4">
            <div className="flex items-center mb-2">
              <CreditCard className="h-4 w-4 text-gray-600 mr-2" />
              <h2 className="text-lg font-bold">결제 정보</h2>
            </div>
            <Separator className="my-2" />
            <div className="mt-2">
              <span className="text-gray-600 text-sm">결제 방법</span>
              <p className="text-base">{order.payment?.method || '-'}</p>
            </div>
            <div className="mt-2">
              <span className="text-gray-600 text-sm">결제 상태</span>
              <div className="mt-1">
                {order.payment?.status && (
                  <Badge className={order.payment?.status ? paymentStatusColors[order.payment.status] : ''}>
                    {order.payment?.status ? paymentStatusLabels[order.payment.status] : '-'}
                  </Badge>
                )}
              </div>
            </div>
            <div className="mt-2">
              <span className="text-gray-600 text-sm">총 금액</span>
              <p className="text-lg font-bold text-primary">{formatCurrency(order.totalAmount, order.currency)}</p>
            </div>
          </Card>
              <Typography variant="h6">주문 정보</Typography>
            </Box>
            <Divider sx={{ my: 1 }} />
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" color="text.secondary">주문번호</Typography>
              <Typography variant="body1">{order.orderNumber}</Typography>
            </Box>
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" color="text.secondary">주문일시</Typography>
              <Typography variant="body1">{formatDate(order.createdAt)}</Typography>
            </Box>
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" color="text.secondary">최종 수정일시</Typography>
              <Typography variant="body1">{formatDate(order.updatedAt)}</Typography>
            </Box>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={3}>
          <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <ShippingIcon color="primary" sx={{ mr: 1 }} />
              <Typography variant="h6">여행 정보</Typography>
            </Box>
            <Divider sx={{ my: 1 }} />
            {order.items[0]?.travelDate ? (
              <>
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary">여행 시작일</Typography>
                  <Typography variant="body1">{formatDate(order.items[0].travelDate.startDate)}</Typography>
                </Box>
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary">여행 종료일</Typography>
                  <Typography variant="body1">{formatDate(order.items[0].travelDate.endDate)}</Typography>
                </Box>
              </>
            ) : (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" color="text.secondary">여행 일정 정보 없음</Typography>
              </Box>
            )}
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" color="text.secondary">인원</Typography>
              <Typography variant="body1">
                {order.items[0]?.quantity ? (
                  <>
                    성인 {order.items[0].quantity.adult}명
                    {order.items[0].quantity.child > 0 && `, 아동 ${order.items[0].quantity.child}명`}
                    {order.items[0].quantity.infant > 0 && `, 유아 ${order.items[0].quantity.infant}명`}
                  </>
                ) : '-'}
              </Typography>
            </Box>
          </Paper>
        </Grid>
        
        <Grid item xs={12} md={3}>
          <Paper variant="outlined" sx={{ p: 2, height: '100%' }}>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <CancelIcon color={order.status === 'cancelled' || order.status === 'refunded' ? 'error' : 'disabled'} sx={{ mr: 1 }} />
              <Typography variant="h6">취소/환불 정보</Typography>
            </Box>
            <Divider sx={{ my: 1 }} />
            {(order.status === 'cancelled' || order.status === 'refunded') ? (
              <>
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary">상태</Typography>
                  <Chip 
                    label={statusLabels[order.status]} 
                    color="error"
                    size="small"
                    sx={{ mt: 0.5 }}
                  />
                </Box>
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary">처리일시</Typography>
                  <Typography variant="body1">{formatDate(order.updatedAt)}</Typography>
                </Box>
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body2" color="text.secondary">사유</Typography>
                  <Typography variant="body1">{order.notes || '정보 없음'}</Typography>
                </Box>
              </>
            ) : (
              <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '70%' }}>
                <Typography variant="body2" color="text.secondary" align="center">
                  취소 또는 환불 처리되지 않은 주문입니다.
                </Typography>
                <Stack direction="row" spacing={2} sx={{ mt: 2 }}>
                  <Button 
                    variant="outlined" 
                    color="error" 
                    size="small" 
                    startIcon={<CancelIcon />}
                    onClick={() => setCancelDialogOpen(true)}
                    disabled={actionLoading}
                  >
                    주문 취소
                  </Button>
                  <Button 
                    variant="outlined" 
                    color="warning" 
                    size="small" 
                    startIcon={<RefreshIcon />}
                    onClick={() => setRefundDialogOpen(true)}
                    disabled={actionLoading}
                  >
                    환불 처리
                  </Button>
                </Stack>
              </Box>
            )}
          </Paper>
        </Grid>
      </Grid>
      
      {/* 주문 상품 정보 */}
      <OrderLineItems order={order} />
      
      {/* 고객 정보 */}
      <OrderCustomerInfo order={order} />
      
      {/* 주문 상태 이력 */}
      <OrderStatusHistory order={order} />
      
      {/* 관리자 메모 */}
      <Paper variant="outlined" sx={{ p: 2, mb: 3 }}>
        <Typography variant="h6" component="h3" gutterBottom>
          관리자 메모
        </Typography>
        
        <TextField
          fullWidth
          multiline
          rows={4}
          value={order.notes || ''}
          placeholder="주문에 대한 관리자 메모를 입력하세요."
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
            // 메모 저장 기능 구현 예정
            console.log('Notes changed:', e.target.value);
          }}
          sx={{ mt: 2 }}
        />
        <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
          <Button 
            variant="contained" 
            onClick={() => alert('메모 저장 기능은 추후 구현 예정입니다.')}
          >
            메모 저장
          </Button>
        </Box>
      </Paper>
      
      {/* 상태 변경 다이얼로그 */}
      <Dialog open={statusDialogOpen} onClose={handleCloseStatusDialog}>
        <DialogTitle>주문 상태 변경</DialogTitle>
        <DialogContent>
          <DialogContentText>
            주문 #{order?.orderNumber}의 상태를 변경합니다.
          </DialogContentText>
          <FormControl fullWidth margin="dense">
            <InputLabel id="status-select-label">상태</InputLabel>
            <Select
              labelId="status-select-label"
              value={newStatus}
              onChange={(e: React.ChangeEvent<{ value: unknown }>) => setNewStatus(e.target.value as OrderStatus)}
              label="상태"
            >
              {Object.keys(statusLabels).map((status) => (
                <MenuItem key={status} value={status}>
                  {statusLabels[status as OrderStatus]}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField
            margin="dense"
            id="status-note"
            label="메모"
            type="text"
            fullWidth
            variant="outlined"
            value={statusNote}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusNote(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseStatusDialog}>취소</Button>
          <Button 
            onClick={handleStatusChange} 
            color="primary"
            disabled={statusUpdateLoading}
          >
            {statusUpdateLoading ? <CircularProgress size={24} /> : '변경'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* 주문 취소 다이얼로그 */}
      <Dialog open={cancelDialogOpen} onClose={() => setCancelDialogOpen(false)}>
        <DialogTitle>주문 취소</DialogTitle>
        <DialogContent>
          <DialogContentText>
            주문 #{order?.orderNumber}을(를) 취소하시겠습니까?
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="cancel-reason"
            label="취소 사유"
            type="text"
            fullWidth
            variant="outlined"
            value={cancelReason}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCancelReason(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCancelDialogOpen(false)}>닫기</Button>
          <Button 
            onClick={handleCancelOrder} 
            color="error"
            disabled={actionLoading}
          >
            {actionLoading ? <CircularProgress size={24} /> : '취소 확인'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* 주문 환불 다이얼로그 */}
      <Dialog open={refundDialogOpen} onClose={() => setRefundDialogOpen(false)}>
        <DialogTitle>주문 환불</DialogTitle>
        <DialogContent>
          <DialogContentText>
            주문 #{order?.orderNumber}의 환불을 처리하시겠습니까?
          </DialogContentText>
          <FormControl fullWidth margin="dense">
            <InputLabel id="refund-type-label">환불 유형</InputLabel>
            <Select
              labelId="refund-type-label"
              value={isPartialRefund ? 'partial' : 'full'}
              onChange={(e: React.ChangeEvent<{ value: unknown }>) => setIsPartialRefund(e.target.value === 'partial')}
              label="환불 유형"
            >
              <MenuItem value="full">전체 환불</MenuItem>
              <MenuItem value="partial">부분 환불</MenuItem>
            </Select>
          </FormControl>
          
          {isPartialRefund && (
            <TextField
              margin="dense"
              id="refund-amount"
              label="환불 금액"
              type="number"
              fullWidth
              variant="outlined"
              value={refundAmount}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                const value = parseFloat(e.target.value);
                if (!isNaN(value) && value > 0 && value <= (order?.totalAmount || 0)) {
                  setRefundAmount(value);
                } else if (e.target.value === '') {
                  setRefundAmount('');
                }
              }}
              InputProps={{
                endAdornment: <Typography variant="body2" color="text.secondary">원</Typography>,
              }}
              helperText={`최대 환불 가능 금액: ${formatCurrency(order?.totalAmount || 0)}`}
            />
          )}
          
          <TextField
            margin="dense"
            id="refund-reason"
            label="환불 사유"
            type="text"
            fullWidth
            variant="outlined"
            value={refundReason}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setRefundReason(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setRefundDialogOpen(false)}>닫기</Button>
          <Button 
            onClick={handleRefundOrder} 
            color="warning"
            disabled={actionLoading || (isPartialRefund && (!refundAmount || refundAmount <= 0))}
          >
            {actionLoading ? <CircularProgress size={24} /> : '환불 처리'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
